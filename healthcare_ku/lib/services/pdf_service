import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:share_plus/share_plus.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:io';
import 'package:intl/intl.dart';
import 'package:healthcare_ku/models/medical_record.dart';
class PDFService {
  Future<File> generateMedicalRecordPDF(MedicalRecord record) async {
    final pdf = pw.Document();

    pdf.addPage(
      pw.MultiPage(
        pageFormat: PdfPageFormat.a4,
        margin: const pw.EdgeInsets.all(32),
        build: (context) => [
          _buildHeader(record),
          _buildDatesSection(record),
          _buildDiagnosisSection(record),
          _buildVitalSignsSection(record),
          _buildPrescriptionsSection(record),
          _buildLabResultsSection(record),
          _buildMedicalHistorySection(record),
          _buildNotesSection(record),
        ],
      ),
    );

    final output = await getTemporaryDirectory();
    final file = File('${output.path}/medical_record_${record.id}.pdf');
    await file.writeAsBytes(await pdf.save());
    return file;
  }

  Future<void> sharePDF(File file) async {
    await Share.shareXFiles([XFile(file.path)], text: 'Medical Record');
  }

  pw.Widget _buildHeader(MedicalRecord record) {
    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        pw.Text(
          'Medical Record',
          style: pw.TextStyle(
            fontSize: 24,
            fontWeight: pw.FontWeight.bold,
          ),
        ),
        pw.SizedBox(height: 8),
        pw.Divider(thickness: 2),
        pw.SizedBox(height: 8),
        _buildInfoRow('Record ID', record.id),
        _buildInfoRow('Patient ID', record.patientId),
        _buildInfoRow('Doctor ID', record.doctorId),
        pw.SizedBox(height: 20),
      ],
    );
  }

  pw.Widget _buildDatesSection(MedicalRecord record) {
    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        _buildSectionTitle('Record Timeline'),
        _buildInfoRow('Created', DateFormat('MMM dd, yyyy HH:mm').format(record.dateCreated)),
        _buildInfoRow('Last Updated', DateFormat('MMM dd, yyyy HH:mm').format(record.lastUpdated)),
        pw.SizedBox(height: 20),
      ],
    );
  }

  pw.Widget _buildDiagnosisSection(MedicalRecord record) {
    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        _buildSectionTitle('Clinical Information'),
        _buildSubSection('Diagnosis', record.diagnosis),
        _buildSubSection('Symptoms', record.symptoms),
        _buildSubSection('Treatment Plan', record.treatmentPlan),
        pw.SizedBox(height: 20),
      ],
    );
  }

  pw.Widget _buildVitalSignsSection(MedicalRecord record) {
    final vitalSigns = record.vitalSigns;
    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        _buildSectionTitle('Vital Signs'),
        if (vitalSigns.temperature != null)
          _buildInfoRow('Temperature', '${vitalSigns.temperature}°C'),
        if (vitalSigns.heartRate != null)
          _buildInfoRow('Heart Rate', '${vitalSigns.heartRate} bpm'),
        if (vitalSigns.bloodPressureSystolic != null && vitalSigns.bloodPressureDiastolic != null)
          _buildInfoRow('Blood Pressure', 
            '${vitalSigns.bloodPressureSystolic}/${vitalSigns.bloodPressureDiastolic} mmHg'),
        if (vitalSigns.respiratoryRate != null)
          _buildInfoRow('Respiratory Rate', '${vitalSigns.respiratoryRate} breaths/min'),
        if (vitalSigns.oxygenSaturation != null)
          _buildInfoRow('Oxygen Saturation', '${vitalSigns.oxygenSaturation}%'),
        if (vitalSigns.height != null)
          _buildInfoRow('Height', '${vitalSigns.height} cm'),
        if (vitalSigns.weight != null)
          _buildInfoRow('Weight', '${vitalSigns.weight} kg'),
        pw.SizedBox(height: 20),
      ],
    );
  }

  pw.Widget _buildPrescriptionsSection(MedicalRecord record) {
    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        _buildSectionTitle('Prescriptions'),
        ...record.prescriptions.map((prescription) {
          return pw.Container(
            margin: const pw.EdgeInsets.only(bottom: 10),
            padding: const pw.EdgeInsets.all(10),
            decoration: pw.BoxDecoration(
              border: pw.Border.all(color: PdfColors.grey),
              borderRadius: const pw.BorderRadius.all(pw.Radius.circular(5)),
            ),
            child: pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                _buildInfoRow('Medication', prescription.medication),
                _buildInfoRow('Dosage', prescription.dosage),
                _buildInfoRow('Frequency', prescription.frequency),
                _buildInfoRow('Duration', prescription.duration),
                _buildInfoRow('Instructions', prescription.instructions),
                _buildInfoRow('Prescribed Date', 
                  DateFormat('MMM dd, yyyy').format(prescription.prescribedDate)),
              ],
            ),
          );
        }).toList(),
        pw.SizedBox(height: 20),
      ],
    );
  }

  pw.Widget _buildLabResultsSection(MedicalRecord record) {
    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        _buildSectionTitle('Laboratory Results'),
        ...record.labResults.entries.map(
          (entry) => _buildInfoRow(entry.key, entry.value.toString()),
        ).toList(),
        pw.SizedBox(height: 20),
      ],
    );
  }

  pw.Widget _buildMedicalHistorySection(MedicalRecord record) {
    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        _buildSectionTitle('Medical History'),
        if (record.allergies.isNotEmpty) ...[
          _buildSubSectionTitle('Allergies'),
          ...record.allergies.map((allergy) => 
            pw.Text('• $allergy', style: const pw.TextStyle(fontSize: 12))),
          pw.SizedBox(height: 10),
        ],
        if (record.existingConditions.isNotEmpty) ...[
          _buildSubSectionTitle('Existing Conditions'),
          ...record.existingConditions.map((condition) => 
            pw.Text('• $condition', style: const pw.TextStyle(fontSize: 12))),
        ],
        pw.SizedBox(height: 20),
      ],
    );
  }

  pw.Widget _buildNotesSection(MedicalRecord record) {
    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        _buildSectionTitle('Additional Notes'),
        pw.Text(record.notes, style: const pw.TextStyle(fontSize: 12)),
        pw.SizedBox(height: 20),
      ],
    );
  }

  pw.Widget _buildSectionTitle(String title) {
    return pw.Container(
      margin: const pw.EdgeInsets.only(bottom: 10),
      child: pw.Text(
        title,
        style: pw.TextStyle(
          fontSize: 16,
          fontWeight: pw.FontWeight.bold,
        ),
      ),
    );
  }

  pw.Widget _buildSubSectionTitle(String title) {
    return pw.Container(
      margin: const pw.EdgeInsets.only(bottom: 5),
      child: pw.Text(
        title,
        style: pw.TextStyle(
          fontSize: 14,
          fontWeight: pw.FontWeight.bold,
        ),
      ),
    );
  }

  pw.Widget _buildSubSection(String title, String content) {
    return pw.Container(
      margin: const pw.EdgeInsets.only(bottom: 10),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            title,
            style: pw.TextStyle(
              fontSize: 14,
              fontWeight: pw.FontWeight.bold,
            ),
          ),
          pw.SizedBox(height: 4),
          pw.Text(content, style: const pw.TextStyle(fontSize: 12)),
        ],
      ),
    );
  }

  pw.Widget _buildInfoRow(String label, String value) {
    return pw.Container(
      margin: const pw.EdgeInsets.only(bottom: 4),
      child: pw.Row(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.SizedBox(
            width: 120,
            child: pw.Text(
              '$label:',
              style: pw.TextStyle(fontWeight: pw.FontWeight.bold),
            ),
          ),
          pw.Expanded(
            child: pw.Text(value),
          ),
        ],
      ),
    );
  }
}